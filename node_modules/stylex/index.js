"use strict";

exports.__esModule = true;
exports["default"] = void 0;

/**
 * Regular expression used to check for the presense of vendor prefix on
 * the Javascript flavor of CSS properties.
 *
 * @const
 */
var VENDOR_PREFIX_REGEX = new RegExp('(webkit|moz|ms|o)([A-Z])');
/**
 * Convert the css attribute name to format supported by Javascript.
 *
 * @param {string} name
 * @return {string}
 */

var convertNameToJson = function convertNameToJson(name) {
  if (!name) {
    return name;
  }

  if (name.length && name[0] === '-') {
    name = name.substr(1);
  }

  var parts = name.split('-');
  parts.forEach(function (part, index) {
    if (index > 0) {
      parts[index] = "" + part.charAt(0).toUpperCase() + part.slice(1);
    }
  });
  return parts.join('');
};
/**
 * Convert Javascript attribute name to format supported by CSS/DOM.
 *
 * @param {string} name
 * @return {string}
 */


var convertNameToCss = function convertNameToCss(name) {
  if (!name) {
    return name;
  }

  if (VENDOR_PREFIX_REGEX.test(name)) {
    name = "-" + name;
  }

  name = name.replace(/[A-Z]/g, function (match) {
    return "-" + match.toLowerCase();
  });
  return name;
};
/**
 * Method for grabbing all stylesheets and rules associated with <style> tags from the page.
 *
 * @return {array}
 */


var getStyles = function getStyles() {
  var styles = [];
  var i; // Parse linked style sheets

  var styleSheets = document.styleSheets;

  for (i = 0; i < styleSheets.length; i++) {
    styles.push(styleSheets[i]);
  } // Parse <style> tags


  var tags = document.querySelectorAll('style');

  for (i = 0; i < tags.length; i++) {
    styles.push(tags[i].sheet);
  }

  return styles;
};

var Stylex = /*#__PURE__*/function () {
  function Stylex() {}

  // Static Methods ____________________________________________________________

  /**
   * Convert cssText string to JSON style object.
   *
   * @param {String} cssText
   * @return {Object}
   */
  Stylex.convertCssText = function convertCssText(cssText) {
    var declarations = cssText.split(';');
    var styles = {};
    declarations.forEach(function (declaration) {
      if (declaration.indexOf(':') > -1) {
        var _declaration$split = declaration.split(':'),
            key = _declaration$split[0],
            value = _declaration$split[1];

        var name = convertNameToJson(key.trim());
        styles[name] = value.trim();
      }
    });
    return styles;
  }
  /**
   * Convert JSON object to cssText.
   *
   * @param {object} json
   * @return {string}
   */
  ;

  Stylex.convertJsonStyles = function convertJsonStyles(json) {
    var styles = '';
    Object.keys(json).forEach(function (key) {
      styles += convertNameToCss(key) + ": " + json[key] + ";";
    });
    return styles;
  }
  /**
   * Return the cssText for the rule specified by the selector.
   *
   * @param {string} selector
   * @return {string}
   */
  ;

  Stylex.findDOMStyles = function findDOMStyles(selector) {
    getStyles().forEach(function (style) {
      var rules = style.rules || style.cssRules;

      if (rules) {
        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i];

          if (rule.selectorText === "" + selector) {
            var cssText = rule.cssText || rule.style.cssText;
            return cssText.replace(selector + " ", '').replace('{ ', '').replace(' }', '');
          }
        }
      }
    });
    return undefined;
  };

  return Stylex;
}();

var _default = Stylex;
exports["default"] = _default;